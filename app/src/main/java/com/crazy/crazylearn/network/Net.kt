package com.crazy.crazylearn.network

class Net


/**
 * 参考模型
 *
 * 1、OSI七层参考模型（ISO国际标准组织1983提出）
 *      7、应用层（Application）--主要为各种网络应用提供网络服务（Email、FTP、微信）
 *      6、表示层（Presentation）--将信息表示为一定形式和格式的数据流(01->比特流)（压缩、解压缩、加密解密）
 *      5、会话层(Session)--负责通讯主机间的会话建立、管理和拆除,协调双方会话
 *      4、传输层（Transport)--参考模型上的核心层之一，负责通信主机间的端到端连接（端到端的联系或数据传递）
 *              对于TCP而言：还负责提供可靠传输、差错恢复、拥塞控制等额外功能
 *      3、网络层（Network）--另一个核心层，功能可用地址和最优路径来描述：它负责将每一个分组从源机一路送达目的机
 *              地址：为通信主机提供标识，IP地址
 *              最优路径：路由、寻径，每一个中间设备都为到达的分组找到一根最优的路径，并送出
 *      2、数据链路层（DataLink）--主要提供介质访问服务
 *              通过物理地址识别通信主机，提供可靠的帧传递，并做差错控制、流控等
 *      1、物理层（Physical）--提供透明的比特流传输（光信号、电信号、无线信号）
 *              物理层只关心比特流的传输，不关心比特流里具体的内容
 *
 *      说明：
 *          每一层都完成特定的功能、都为它的上一层提供服务
 *          每一层都是使用它下层提供的服务
 *          除了第1层、第7层
 *
 * 2、TCP/IP四层参考模型
 *      4、应用层（Application）
 *      3、传输层（Transport）
 *      2、网络层（Internet ）
 *      1、数据链路层（Network Access）
 *
 *
 * 3、共同点
 *      1、都分层，都有应用层，尽管他们的服务不同
 *      2、都有可比较的传输层和网络层
 *      3、是用的分组交换而不是电路交换技术
 * 4、不同点
 *      1、TCP/IP将表示层和会话层包含到了应用层
 *      2、TCP/IP将OSI的数据链路层和物理层包含到了一层
 *      3、TCP/IP更简洁，但OSI更易于开发和排除故障
 *      4、TCP/IP是在实践中产生的，是当今互联网Internet所采用的模型，
 *          而OSI仅仅停留在教科书里
 * 5、OSI参考模型没有流行起来的原因：（并没有流行起来）
 *      糟糕的时机:  TCP/IP已经流行
 *      糟糕的技术:  参杂了太多政策的考量
 *      糟糕的实现： 庞大而笨拙
 *
 * 6、协议数据单元PDU
 *      7、信息（Information，应用层）
 *      765、数据流（DataStream,上三层）
 *      4、数据段（Segment，传输层）
 *      3、分组（Packet,网络层）
 *      2、帧（Frame,数据链路层）
 *      1、比特流（Bits,物理层）
 *
 */

/**
 *
 *
一、传输层

0、传输层：提供高效、可靠、性价比高的数据传输服务

作用范围对比：
1、网络层：负责将数据从原机送到目的机（主机到主机）
2、传输层：负责将数据送达到具体的应用程序（端到端）

3、传输层数据单元TPDU(Segment)-->网络层数据单元分组（Packet）
-->数据链路层数据单元帧（Frame）-->物理层数据分组比特流（Bits）

4、传输层两个常用协议：
用户数据报协议UDP(User Datagram Protocol)
传输控制协议TCP(Transmission Control Protocol)

二、UDP
5、UDP是一个无连接的传输层协议，传输数据段（Segment）、无需建立连接、不提供数据的可靠传输
UDP可以使用源端口和目的端口，而IP不可以
UDP:提供端点标识，端到端的数据传输，不提供差错控制和可靠传输，但简洁高效


6、UDP数据段头（4个字段共8字节）
------------------32Bits-----------------------
Source port		|		Destination port
-----------------------------------------------
UDP Length		|		UDP checksum

UDP数据段包括4个字段共8字节的头部和数据两个部分
第三个字段，长度字段（域）表示：包括头部和数据总共多少字节
第四字段，校验和：可选，如果不计算校验和，则该字段值为0
最重要的1、2字段：分别表示源端口、目的端口，都是用16比特表示（2个字节=>2^16=65536）
7、UDP端口范围：0--65535
<=1023（知名端口）用于公共
1024-49151用户端口，注册端口
>=41952动态端口，私人端口
8、自由端口（Free port）
本地分配
动态的随机端口（操作系统分配）

三、通信模型
9、UDP、TCP数据段都是：端到端
10、端点（套接字Socket）:	包含IP地址和端口号Port(IP,Port)
11、通信5元组
源端		Source IP			源IP---------源端点（End Point）
Source Port(2字节)			源Port--------
传输协议	TCP
目的端		Destination IP		目的IP---------目的 端点（End Point）
Destination Port	目的
12、通信模型=>通信三元组
原端点、协议、目的端点


四、TCP数据段
1、TCP(Transmission Control Protocol)
在不可靠的互联网络上提供端到端的字节流、
动态适应不同拓扑、带宽、延迟、分组大小和其他网络参数,
在有错误是，能够足够健壮
2、传输控制协议
支持TCP的机器都有一个TCP实体，或者用户进程或者操作系统内核，都可以管理TCP流和跟IP层的接口
发方：封装
TCP实体接收本地进程的用户数据流，将其分割成不超过64KB的分片
（实践中，通常分割成1460个字节，以通过以太网创数）
收方：解封装
当包含TCP数据段的报文到达某台机器时，被提交给传输实体，传输实体将其重构出原始的字节流
3、TCP协议：
TCP连接上的每个字节都有它自己独有的32位序列号
但收发双方的TCP实体不以字节，而是以数据段的形式交换数据
4、两个因素限制数据段的长度：
TCP数据段必须适合IP分组的65515字节（65535-20）的载荷限制
每个TCP数据段必须适合于下层网络的MTU
5、TCP数据段（TUPDU）格式（包含14字段）
a)源端口、目的端口：通信五元组中的两个
b)序列号：为每个字节编号
c)确认号：ack控制位置位才有效
d)六个控制位：用于建立连接、拆除、异常处理等
e)窗口尺寸：用于流控，以免收方被数据淹没


6、控制比特（1bit）
URG URG=1时，有紧急数据，必须首先处理,为1表示高优先级数据包，紧急指针字段有效。
ACK	1/0,1:表示确认号有效，0：确认号无效
PSH	表示带有PUSH标志的数据，接收方收到这样的数据，应该立刻送到上层，而不需要缓存
RST	用来重置一个已经混乱的连接，如果在连接建立阶段，则直接拒绝建立连接
SYN 用在连接建立的过程 与ACK一起使用
SYN=1 ACK=0 连接请求
SYN=1 ACK=1 连接接受

FIN 用来释放连接，表示发送方已经没有数据要传输了，但是可以继续接受数据

7、滑动窗口（Windwo size 16位）
为了避免接收方被大量涌入的数据所淹没，TCP实体进行了流控（Flow control）
目的：告诉对方可以发送的数据字节数，即从确认字节号开始，连续发送的字节总数
串口尺寸的大小，取决于接收方

五、三次握手
a)一方（server）被动的等待一个进来的连接请求
b)另一方（Client）通过发送连接请求，设置一些参数
c)服务器方回发确认应答
d)应答到达请求方，请求方最后确认连接建立
host1------建立TCP连接-----host2
|						 	  |
|-----SYN（SEQ=x）----------->|	第一次握手信息:连接请求数据段SYN,包含一个初始序列号seq=X（随机产生）
|	控制位（SYN=1,ACK=0）	  |	整个SYN为
|						 	  |
|						 	  |
|<----SYN（SEQ=y，ACK=x+1）---|接收方收到请求，回复连接应答数据段SYN,,包含初始序列号seq=y（随机产生），
|	控制位（SYN=1,ACK=1）	  |包含确认号叫ACK number=x+1,表示对Host1的x号字节的确认，第二次握手
|						 	  |
|						 	  |
|----(SEQ=x+1,ACK=y+1)------->|第三次握手，最后确认，包含序列号seq=x+1,确认号ack=y+1
|   控制位（SYN=0,ACK=1）	  |
|						 	  |
|					  		  |三层握手建立TCP连接也被称为同步，双方交换初始序列号，可用于跟踪后续每个字节，后续字节编号以初始序列号为|基础，TCP为全双工
|Dos攻击：请求者不断发送第一次握手数据段信息，伪造源IP地址，导致第三次握手信息无法到达，耗尽服务器资源

六、四次挥手（TCP连接释放）
a)任何一方在没有数据要传送时，都可以发送一个FIN=1置位了的TCP数据段
b)当FIN被确认时，该方向的连接被关闭
c)当双向连接都关闭的时候，连接释放
host1------断开TCP连接-----host2
|					|
发送方释放请求DR|------1----------->|
启动计时器	|					|
|					|
|<--------2---------|回送确认ACK
|<--------3---------|发送释放请求DR
|					|启动计时器
释放连接|					|
回送确认ACK|---------4-------->|
|					|释放连接
|					|
|					|
定时器超期时，强制释放连接


七、TCP传输策略
当窗口数为0时，发送者不能正常发送数据段，除非：
Urgent数据：用户想杀掉远端机器上的进程时。可以发送数据		发送者可以发送一个字节的数据段，以便让接收者再次发送期待接收的字节号（ack=2048）和窗口数（win=1024）避免死锁
优化
接收端：接收端可以推迟500ms发送确认分组ack和窗口更新win,以便可以免费搭载在处理后的回显分组内
发送端：攒包发送
傻瓜窗口：
当收方处理1个字节时，即回复更新窗口win=1，如此往复，解决：等待缓存达到阈值时才发送更新窗口

八、TCP拥塞控制
1、拥塞两种情景
接收方容量不够（快速的网络向小容量的接收方传输数据）
网络内部瓶颈（慢速的网络向大容量接收方传输数据）
解决：为发送者维护两个窗口
a)接收者窗口：反应目前接收者的处理能力（容易获得）
b)拥塞窗口：大小反应网络目前的容量（难于获得）
d)只要发送者发送的数据字节数是两个窗口中小的那个窗口数
e)阈值
f)因特网建议标准定义了四种算法来进行拥塞控制：慢启动、拥塞避免、快重传和快恢复

九、TCP定时器
TCP采用了肯定确认重传技术来保证每一个字节的可靠传输
重传定时器：为解决数据段丢失问题，没发一个数据段，都会启动一个定时器
持续定时器：避免死锁，win=0后等待，再次发送win=1024时丢包，导致收发双方等待死锁
发送方在收到win=0时，启动持续定时器，如果超时还没有收到更新窗口，则发送探测数据段，使对方重发
保活定时器：连接是否存活

十、TCP与UDPd对比
性能		TCP		UDP
可靠性		有		无
传输延迟	不确定	网络延迟
拥塞控制	有		无

选择：
TCP:
可靠传输方式
可让应用程序简单化，程序员可以不必进行错误检查、修正等工作
UDP:
为了降低对计算机资源的需求（如DNS）
应用程序本身已提供数据完整性的检查机制，无需依赖传输层的协议来保证
应用程序传输的并非关键性的数据（路由器周期性的路由信息交换）
一对多方式（组播、广播），必须使用UDP(TCP限于一对一的传送)

UDP:
端到端的、尽力而为的、无连接的数据报传输服务
1.无连接的
2.尽最大努力交付，即不保证可靠交付
3.面向报文的（在IP的功能上简单扩展了端到端）
4.没有拥塞控制
5.支持一对一、一对多、多对一和多对多的交互通信（需要组播的通信都是建立在UDP之上）

TCP:
端到端的、可靠的、面向连接的字节流服务
1.面向连接：先建立逻辑连接，进行双向数据流传输，通信结束后撤销连接
2.面向字节流
3.点对点的全双工通信
4.可靠传输：对一个连接上传输的每个字节编号，通过接收确认和重传来保证可靠传输
5.流量控制：防止发送方发出的数据超出接收方的接收能力
6.拥塞控制：防止过多数据注入网络造成网络结点或链路超载
————————————————
版权声明：本文为CSDN博主「丿残念灬」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_31759205/article/details/80622594



-------------------网络层--------------------------------------

1、IP协议
IP地址（定位目标机）
IP分组（解决信息的封装）
IPV6
2、路由选择协议
距离适量路由选择协议(RIP)
链路状态路由选择协议（OSPF）
3、ARP、ICMP、NAT

数据报网络
虚电路网络
IP:



-------------------应用层--------------------------------------
1、DNS:


总结：
1、链路层的主要工作就是对电信号进行分组并形成具有特定意义的数据帧，然后以广播的形式通过物理介质发送给接收方
2、网络层的主要工作是定义网络地址，区分网段，子网内MAC寻址，对于不同子网的数据包进行路由。
3、输层的主要工作是定义端口，标识应用程序身份，实现端口到端口的通信，TCP协议可以保证数据传输的可靠性。
4、应用层的主要工作就是定义数据格式并按照对应的格式解读数据。

最终：（https://www.cnblogs.com/onepixel/p/7092302.html）
当你输入一个网址并按下回车键的时候，首先，应用层协议对该请求包做了格式定义；紧接着传输层协议加上了双方的端口号，确认了双方通信的应用程序；然后网络协议加上了双方的IP地址，确认了双方的网络位置；最后链路层协议加上了双方的MAC地址，确认了双方的物理位置，同时将数据进行分组，形成数据帧，采用广播方式，通过传输介质发送给对方主机。而对于不同网段，该数据包首先会转发给网关路由器，经过多次转发后，最终被发送到目标主机。目标机接收到数据包后，采用对应的协议，对帧数据进行组装，然后再通过一层一层的协议进行解析，最终被应用层的协议解析并交给服务器处理。
 *
 *
 *
 **/
